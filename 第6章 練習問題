
2.                //I'm not clear at "return 0;" at the end of primary2
                  //Is that OK?


#include "../../std_lib_facilities.h"

//------------------------------------------------------------------------------

class Token{
public:
	char kind;        // what kind of token
	double value;     // for numbers: a value 

	Token(char ch)    // make a Token from a char//つまりcharだけ渡されたとき
		:kind(ch), value(0) { }
	Token(char ch, double val)     // make a Token from a char and a double
		:kind(ch), value(val) { }
};

//------------------------------------------------------------------------------

class Token_stream {
public:
	Token_stream();   // make a Token_stream that reads from cin
	Token get();      // get a Token (get() is defined elsewhere)
	void putback(Token t);    // put a Token back
private:
	bool full;        // is there a Token in the buffer?
	Token buffer;     // here is where we keep a Token put back using putback()
};

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
	:full(false), buffer(0)    // no Token in buffer
{
}

//------------------------------------------------------------------------------

// The putback() member function puts its argument back into the Token_stream's buffer:
void Token_stream::putback(Token t)
{
	if (full) error("putback() into a full buffer");
	buffer = t;       // copy t to buffer
	full = true;      // buffer is now full
}

//------------------------------------------------------------------------------

Token Token_stream::get()
{
	if (full) {       // do we already have a Token ready?
					  // remove token from buffer
		full = false;
		return buffer;
	}

	char ch;
	cin >> ch;    // note that >> skips whitespace (space, newline, tab, etc.)

	switch (ch) {
	case '=':    // for "print"
	case 'x':    // for "quit"
	case '(': case ')': case '+': case '-': case '*': case '/':
	case '{': case '}':
		return Token(ch);        // let each character represent itself
	case '.':
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
	{
		cin.putback(ch);         // put digit back into the input stream
		double val;
		cin >> val;              // read a floating-point number
		return Token( '8', val );   // let '8' represent "a number"
	}
	default:
		error("Bad token");
	}
}

//------------------------------------------------------------------------------

Token_stream ts;        // provides get() and putback() 

						//------------------------------------------------------------------------------

double expression();    // declaration so that primary() can call expression()

						//------------------------------------------------------------------------------

						// deal with numbers and parentheses



//-----------------

double primary2()
{
	Token t = ts.get();
	switch (t.kind) {
	case '(':    // handle '(' expression ')'
	{
		double d = expression();
		t = ts.get();
		if (t.kind != ')') error("')' expected");
			return d;
	}
	case '8':            // we use '8' to represent a number
		return t.value;  // return the number's value
	default:
//		error("primary expected");
		ts.putback(t);
		return 0;
	}
}

//------------------------------------------------------------------------------


double primary1()
{
	double left  = primary2();
	Token t = ts.get();

	switch (t.kind) {
	case '{':    // handle '{' expression '}'
	{
		double d = expression();
		t = ts.get();
		if (t.kind != '}') error("'}' expected");
		return d;
	}
	case '8':            // we use '8' to represent a number
		return t.value;  // return the number's value
	default:
//		error("at primary1");
		ts.putback(t);
		return left;


	}
}


//------------------------------------------------------------------------------


// deal with *, /, and %
double term()
{
	double left = primary1();
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '*':
			left *= primary1();
			t = ts.get();
			break;
		case '/':
		{
			double d = primary1();
			if (d == 0) error("divide by zero");
			left /= d;
			t = ts.get();
			break;
		}
		default:
			ts.putback(t);     // put t back into the token stream
			return left;
		}
	}
}

//------------------------------------------------------------------------------

// deal with + and -
double expression()
{
	double left = term();      // read and evaluate a Term
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '+':
			left += term();    // evaluate Term and add
			t = ts.get();
			break;
		case '-':
			left -= term();    // evaluate Term and subtract
			t = ts.get();
			break;
		default:
			ts.putback(t);     // put t back into the token stream
			return left;       // finally: no more + or -: return the answer
		}
	}
}

//------------------------------------------------------------------------------

int main()
try
{
	cout << "Welcome to our simple calculator."
		<< "\nPlease enter expressions using floating-point numbers.\n"
		<< "You can use +, -, *, /, (, ) and press x for quit, press = for print.\n";

	double val = 0;
	while (cin) {
		Token t = ts.get();
		
		if (t.kind == 'x') break; // 'x' for quit
		if (t.kind == '=')        // '=' for "print now"
			cout << val << '\n';
		else
			ts.putback(t);
		val = expression();
	}
	keep_window_open();
}
catch (exception& e) {
	cerr << "error: " << e.what() << '\n';
	keep_window_open();
	return 1;
}
catch (...) {
	cerr << "Oops: unknown exception!\n";
	keep_window_open();
	return 2;
}

//------------------------------------------------------------------------------




3.  練習問題
//I thought I haven't changed "grammar". maybe I don't understand what the grammar is.
//I added factorial() but, sentences in primary1 and primary2 are kind of mess. is there any better idea?

#include "../../std_lib_facilities.h"

//------------------------------------------------------------------------------

class Token{
public:
	char kind;        // what kind of token
	double value;     // for numbers: a value 

	Token(char ch)    // make a Token from a char//つまりcharだけ渡されたとき
		:kind(ch), value(0) { }
	Token(char ch, double val)     // make a Token from a char and a double
		:kind(ch), value(val) { }
};

//------------------------------------------------------------------------------

class Token_stream {
public:
	Token_stream();   // make a Token_stream that reads from cin
	Token get();      // get a Token (get() is defined elsewhere)
	void putback(Token t);    // put a Token back
private:
	bool full;        // is there a Token in the buffer?
	Token buffer;     // here is where we keep a Token put back using putback()
};

//------------------------------------------------------------------------------

// The constructor just sets full to indicate that the buffer is empty:
Token_stream::Token_stream()
	:full(false), buffer(0)    // no Token in buffer
{
}

//------------------------------------------------------------------------------

// The putback() member function puts its argument back into the Token_stream's buffer:
void Token_stream::putback(Token t)
{
	if (full) error("putback() into a full buffer");
	buffer = t;       // copy t to buffer
	full = true;      // buffer is now full
}

//------------------------------------------------------------------------------

Token Token_stream::get()
{
	if (full) {       // do we already have a Token ready?
					  // remove token from buffer
		full = false;
		return buffer;
	}

	char ch;
	cin >> ch;    // note that >> skips whitespace (space, newline, tab, etc.)

	switch (ch) {
	case '=':    // for "print"
	case 'x':    // for "quit"
	case '(': case ')': case '+': case '-': case '*': case '/':
	case '{': case '}': case '!':
		return Token(ch);        // let each character represent itself
	case '.':
	case '0': case '1': case '2': case '3': case '4':
	case '5': case '6': case '7': case '8': case '9':
	{
		cin.putback(ch);         // put digit back into the input stream
		double val;
		cin >> val;              // read a floating-point number
		return Token( '8', val );   // let '8' represent "a number"
	}
	default:
		error("Bad token");
	}
}

//------------------------------------------------------------------------------

Token_stream ts;        // provides get() and putback() 

//------------------------------------------------------------------------------

int factorial(double n) {
	int N = n;
	if (N == 0) { return 1; }			//NO "if(N = 0){}"

	for (int i = N-1; i >= 1; --i) {
		N *= i;
	}

	return N;
}


double expression();    // declaration so that primary() can call expression()

//------------------------------------------------------------------------------

						// deal with numbers and parentheses



//-----------------

double primary2()
{
	Token t = ts.get();
	switch (t.kind) {
	case '(':    // handle '(' expression ')'
	{
		double d = expression();
		t = ts.get();
		if (t.kind != ')') error("')' expected");

		Token tforfact = ts.get();
		if (tforfact.kind == '!') { d = factorial(d); }
		else (ts.putback(tforfact));
		return d;  // return the number's value

	}
	case '8':		// we use '8' to represent a number
	{
		double left = t.value;
		Token tforfact = ts.get();
		if (tforfact.kind == '!') { left = factorial(left); }
		else (ts.putback(tforfact));
		return left;  // return the number's value
	}
	default:
//		error("primary expected");		//for testing
		ts.putback(t);
		return 0;
	}
}

//------------------------------------------------------------------------------


double primary1()
{
	double left  = primary2();
	Token t = ts.get();

	switch (t.kind) {
	case '{':    // handle '{' expression '}'
	{
		double d = expression();
		t = ts.get();
		if (t.kind != '}') error("'}' expected");

		Token tforfact = ts.get();
		if (tforfact.kind == '!') { d = factorial(d); }
		else (ts.putback(tforfact));

		return d;
	}
	case '8':		// we use '8' to represent a number
	{
		double left = t.value;
		Token tforfact = ts.get();
		if (tforfact.kind == '!') { left = factorial(left); }
		else (ts.putback(tforfact));
		return left;  // return the number
//		return t.value;  // return the number's value
	}
	default:
//		error("at primary1");		for test
		ts.putback(t);
		return left;


	}
}


//------------------------------------------------------------------------------


// deal with *, /, and %
double term()
{
	double left = primary1();
	Token t = ts.get();      	// get the next token from token stream


	while (true) {
		switch (t.kind) {
		case '*':
			left *= primary1();
			t = ts.get();
			break;
		case '/':
		{
			double d = primary1();
			if (d == 0) error("divide by zero");
			left /= d;
			t = ts.get();
			break;
		}
		default:
			ts.putback(t);     // put t back into the token stream
			return left;
		}
	}
}

//------------------------------------------------------------------------------

// deal with + and -
double expression()
{
	double left = term();      // read and evaluate a Term
	Token t = ts.get();        // get the next token from token stream

	while (true) {
		switch (t.kind) {
		case '+':
			left += term();    // evaluate Term and add
			t = ts.get();
			break;
		case '-':
			left -= term();    // evaluate Term and subtract
			t = ts.get();
			break;
		default:
			ts.putback(t);     // put t back into the token stream
			return left;       // finally: no more + or -: return the answer
		}
	}
}

//------------------------------------------------------------------------------

int main()
try
{
	cout << "Welcome to our simple calculator."
		<< "\nPlease enter expressions using floating-point numbers.\n"
		<< "You can use +, -, *, /, (, ) and press x for quit, press = for print.\n";

	double val = 0;
	while (cin) {
		Token t = ts.get();
		
		if (t.kind == 'x') break; // 'x' for quit
		if (t.kind == '=')        // '=' for "print now"
			cout << val << '\n';
		else
			ts.putback(t);
		val = expression();
	}
	keep_window_open();
}
catch (exception& e) {
	cerr << "error: " << e.what() << '\n';
	keep_window_open();
	return 1;
}
catch (...) {
	cerr << "Oops: unknown exception!\n";
	keep_window_open();
	return 2;
}

//------------------------------------------------------------------------------



練習問題 4.



#include "../../std_lib_facilities.h"


class Name_value {
public:
	string name;
	double value;

	Name_value(string st)					//ここ、よくわかっていない。
		:name(st), value(0) { }				//名前だけ渡されるときとかないからなくていいのかな？
	Name_value(string st,double val)			//電卓のプログラムをまだりかいしていないから、そっち
		:name(st),value(val){ }				//からそのまま借りてきただけ.		

};

class Name_value_stream {
public:
	void putintostream(Name_value nv);
	void name_search(Name_value nv);

private:
	vector<Name_value> names_stream_for_search;		//識別子がややこしい

};




void Name_value_stream::putintostream(Name_value n){
	Name_value_stream::names_stream_for_search.push_back(n);
};

Name_value_stream nv;

void Name_value_stream::name_search(Name_value nv)			//これは第4章のやつそのまま使っただけだけど
{									//だったら第4章の方がコードが散らかってないと思う。
	int judge = 0;
	for (int i = 0; i < names_stream_for_search.size(); i++) {
		if (nv.name == names_stream_for_search[i].name)
			++judge;
	}
	if (judge != 0)
		error("You could not use same name twice.");

}

int main() {
	vector<Name_value> NV;
	string name;
	double value;
	
	
	cout << "名前と点数を入力してください。\n";
	int i = 0;
	while (cin) {

		cin >> name >> value;					//Tokenでやれってことなのかな。Tokenにしてないし
//		NV.push_back( Name_value(name,value));			//ここはまだまとまってなくて、valueにも値を入れないと
		if (name != ";") {					//coutしない。
			if (i != 0) {
				nv.name_search(Name_value(name, value));
			}
			nv.putintostream(Name_value(name, value));
			NV.push_back(Name_value(name, value));

			++i;
		}
		else{

			for (int i = 0; i < NV.size(); ++i) {
				cout <<'\n'<< NV[i].name << "さんの点数は" << NV[i].value << "です。";
			}
			cout << "\n";
			break;
		}
	}


	return 0;
}
